[include mainsail.cfg]

[printer]
kinematics: cartesian
max_velocity: 200
max_accel: 2000
max_z_velocity: 5
max_z_accel: 100

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_3A000D000D51313234353230-if00

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

#[bltouch]
#sensor_pin: ^PC2
#control_pin: PA1
#x_offset: 40
#y_offset: 10
#z_offset: 3.2
#pin_up_touch_mode_reports_triggered: False

#[safe_z_home]
#home_xy_position: 118,118 # Change coordinates to the center of your print bed
#speed: 50
#z_hop: 10                 # Move up 10mm
#z_hop_speed: 5

#[bed_mesh]
#speed: 120
#horizontal_move_z: 5
#mesh_min: 50, 10
#mesh_max: 220, 225
#probe_count: 6,6

#[stepper_x]
#step_pin: PB13
#dir_pin: PB12
#enable_pin: !PB14
#microsteps: 16
#rotation_distance: 40
#endstop_pin: ^PC0
#position_endstop: 0
#position_max: 235
#homing_speed: 50

#[tmc2209 stepper_x]
#uart_pin: PC11
#tx_pin: PC10
#uart_address: 0
#run_current: 0.580
#hold_current: 0.500
#stealthchop_threshold: 999999

#[stepper_y]
#step_pin: PB10
#dir_pin: PB2
#enable_pin: !PB11
#microsteps: 16
#rotation_distance: 40
#endstop_pin: ^PC1
#position_endstop: 0
#position_max: 235
#homing_speed: 50

#[tmc2209 stepper_y]
#uart_pin: PC11
#tx_pin: PC10
#uart_address: 2
#run_current: 0.580
#hold_current: 0.500
#stealthchop_threshold: 999999

#[stepper_z]
#step_pin: PB0
#dir_pin: !PC5
#enable_pin: !PB1
#microsteps: 16
#rotation_distance: 4
#endstop_pin: probe:z_virtual_endstop
#position_max: 250
#position_min: -3

#[tmc2209 stepper_z]
#uart_pin: PC11
#tx_pin: PC10
#uart_address: 1
#run_current: 0.580
#hold_current: 0.500
#stealthchop_threshold: 999999

#[extruder]
#step_pin: PB3
#dir_pin: !PB4
#enable_pin: !PD1
#microsteps: 16
#rotation_distance: 24.615
#nozzle_diameter: 0.400
#filament_diameter: 1.750
#heater_pin: PC8
#sensor_type: EPCOS 100K B57560G104F
#sensor_pin: PA0
#min_temp: 0
#max_temp: 280

#[tmc2209 extruder]
#uart_pin: PC11
#tx_pin: PC10
#uart_address: 3
#run_current: 0.650
#hold_current: 0.500
#stealthchop_threshold: 999999

#[heater_bed]
#heater_pin: PC9
#sensor_type: ATC Semitec 104GT-2
#sensor_pin: PC4
#min_temp: 0
#max_temp: 130



## Use the PAUSE macro direct in your M600:
##  e.g. with a different park position front left and a minimal height of 50 
[gcode_macro M600]
    description: Filament change
    gcode: PAUSE X=1 Y=1 Z_MIN=50
#  Z_MIN will park the toolhead at a minimum of 50 mm above to bed to make it easier for you to swap filament.

## Client variable macro for your printer.cfg
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 1.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 1.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 0.2   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 0.2   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
gcode:

# This file contains all settings for KAMP, and must be included in printer.cfg with:

[include KAMP_Settings.cfg]

### The following [includes] can be uncommented from within KAMP_Settings.cfg. ###

# This file enables the use of adaptive meshing.

[include ./KAMP/Adaptive_Meshing.cfg]

# This file enables the use of adaptive line purging.

[include ./KAMP/Line_Purge.cfg]

# This file enables the use of the adaptive Voron logo purge.

[include ./KAMP/Voron_Purge.cfg]

# This file enables the use of KAMP's Smart Park feature.

[include ./KAMP/Smart_Park.cfg]

[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 X125 Y50 Z80                ; move to servicing position
   G1 E5 F300                    ; extrude a little to soften tip
   G1 E-10 F3000                  ; jerk the filament out of the melt zone
   G1 E-50 F1800                  ; retract the rest of the way
   G1 E-50 F900                   ; retract the rest of the way
   M82  

[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E50 F300                    ; load
   G1 E50 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82

[exclude_object]

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1                          ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT



# Spoolman Macros:

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

 
